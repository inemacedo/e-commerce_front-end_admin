import React, { useState } from "react";
import { useSelector } from "react-redux";
import CreateItem from "./CreateItem";
import { useForm } from "react-hook-form";

async function fetchData({ url, method, token, body }) {
  const response = await fetch(url, {
    method: method,
    headers: {
      "Content-Type": "application/json",
      Authorization: "Bearer " + token,
    },
    body: JSON.stringify(body),
  });
  const data = await response.json();
  return data;
}

function CreateProduct() {
  const user = useSelector((state) => state.user);
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [price, setPrice] = useState("");
  const [measures, setMeasures] = useState("");
  const [style, setStyle] = useState("");
  const [environment, setEnvironment] = useState("");
  const [stock, setStock] = useState("");
  const [featured, setFeatured] = useState("");
  const [image, setImage] = useState("");
  const [imagemeasures, setImagemeasures] = useState("");
  const [imageenvironment, setImageenvironment] = useState("");
  const [category, setCategory] = useState("");

  const handleSubmit = async (ev) => {
    ev.preventDefault();

    const createProducts = async () => {
      const data = await fetchData({
        url: process.env.REACT_APP_API_URL + "/products",
        method: "POST",
        token: user.token,
        body: {
          title: title,
          description: description,
          price: price,
          measures: measures,
          style: style,
          environment: environment,
          stock: stock,
          featured: featured,
          image: image,
          imagemeasures: imagemeasures,
          imageenvironment: imageenvironment,
          category: category,
        },
      });
      console.log(data);
      setTitle(""); //poner vacíos los demás
    };
    createProducts();
  };

  return (
    <div>
      <CreateItem>
        <form onSubmit={handleSubmit}>
          <div className="row">
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Título
              </label>
              <input
                value={title}
                onChange={(ev) => setTitle(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Descripción
              </label>
              <input
                value={description}
                onChange={(ev) => setDescription(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Precio
              </label>
              <input
                value={price}
                onChange={(ev) => setPrice(ev.target.value)}
                className="form-control form-control-lg"
                type="number"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Medidas
              </label>
              <input
                value={measures}
                onChange={(ev) => setMeasures(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Estilo
              </label>
              <input
                value={style}
                onChange={(ev) => setStyle(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Ambiente
              </label>
              <input
                value={environment}
                onChange={(ev) => setEnvironment(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Stock
              </label>
              <input
                value={stock}
                onChange={(ev) => setStock(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Destacado
              </label>
              <input
                value={featured}
                onChange={(ev) => setFeatured(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Imagen Principal
              </label>
              <input
                value={image}
                onChange={(ev) => setImage(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Imagen Ambiente
              </label>
              <input
                value={imageenvironment}
                onChange={(ev) => setImageenvironment(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Imagen Medidas
              </label>
              <input
                value={imagemeasures}
                onChange={(ev) => setImagemeasures(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
            <div className="col-md-12 col-lg-6">
              <label className="mt-2 mb-0" htmlFor="">
                Categoría
              </label>
              <input
                value={category}
                onChange={(ev) => setCategory(ev.target.value)}
                className="form-control form-control-lg"
                type="text"
              />
            </div>
          </div>
          <button className="btn btn-primary btn-icon-split mt-4" type="submit">
            <span className="icon text-white-50">
              <i className="fas fa-check"></i>
            </span>
            <span className="text">Create</span>
          </button>
        </form>
      </CreateItem>
    </div>
  );
}

export default CreateProduct;
